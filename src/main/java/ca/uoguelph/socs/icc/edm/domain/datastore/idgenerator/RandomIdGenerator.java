/* Copyright (C) 2014, 2015 James E. Stark
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package ca.uoguelph.socs.icc.edm.domain.datastore.idgenerator;

import java.security.SecureRandom;

import java.util.List;
import java.util.Set;

import java.util.HashSet;

/**
 * An <code>IdGenerator</code> which returns unique random ID numbers.  The ID
 * numbers are generated using a 64bit cryptographically secure pseudo random
 * number generation algorithm.  All ID's returned by an instance of this class
 * are cached to ensure that no ID number is returned twice.  The user has the
 * option of specifying a <code>Set</code> of previously used id numbers, which
 * the instance will avoid returning.
 *
 * @author  James E. Stark
 * @version 1.0
 */

public class RandomIdGenerator extends IdGenerator
{
	/** The <code>Set</code> of previously used id numbers. */
	private Set<Long> usedids;

	/** The random number generator. */
	private SecureRandom generator;

	/**
	 * Static initializer to register the <code>IdGenerator</code> with the
	 * <code>IdGeneratorFactory</code>.
	 */

	static
	{
		IdGenerator.registerGenerator (RandomIdGenerator.class, RandomIdGenerator::getInstance);
	}

	/**
	 * Get an instance of the <code>RandomIdGenerator</code>.
	 *
	 * @param  ids The <code>List</code> of previously used id numbers, not null
	 *
	 * @return     The <code>RandomIdGenerator</code> instance
	 */

	public static RandomIdGenerator getInstance (final List<Long> ids)
	{
		assert ids != null : "ids is NULL";

		return new RandomIdGenerator (ids);
	}

	/**
	 * Create a new <code>RandomIdGenerator</code>, with a <code>List</code> of
	 * previously used Ids.
	 *
	 * @param  usedids The <code>List</code> of used ID numbers, not null
	 */

	private RandomIdGenerator (List<Long> usedids)
	{
		this.usedids = new HashSet<Long> (usedids);
		this.generator = new SecureRandom ();
	}

	/**
	 * Return the next available id number.  This method uses a random number
	 * generator to get the next ID number which it then returns.
	 *
	 * @return A <code>Long</code> containing the next id number
	 */

	@Override
	public Long nextId ()
	{
		Long result = null;

		do
		{
			result = Long.valueOf (this.generator.nextLong ());
		} while ((result < 0) && (! this.usedids.add (result)));

		return result;
	}

	/**
	 * Return the <code>Set</code> of previously used ID numbers.  Includes all
	 * of ID numbers generated by this instance of the
	 * <code>IdGenerator</code>, and previous instances.
	 *
	 * @return The <code>Set</code> of previously used id numbers.
	 */

	public Set<Long> getUsedIds ()
	{
		return new HashSet<Long> (this.usedids);
	}
}
