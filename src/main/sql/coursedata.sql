-- Schema for the anonymized, "public" database of course data.  This schema
-- is documented in the wiki.

CREATE TYPE E_SEMESTER AS ENUM ('WINTER', 'SPRING', 'FALL');

-- Courses table, making sure that there may be only one offering of a given
-- course in a given semester.
CREATE TABLE IF NOT EXISTS COURSE (
	ID SERIAL PRIMARY KEY,
	YEAR INTEGER NOT NULL,
	SEMESTER E_SEMESTER NOT NULL,
	NAME TEXT NOT NULL,
	UNIQUE (YEAR, SEMESTER, NAME)
);

COMMENT ON TABLE COURSE IS 'All of the course offerings';
COMMENT ON COLUMN COURSE.SEMESTER  IS 'Enumeration specifying the semester in which the course was offered.  Will be one of WINTER, SPRING or FALL';
COMMENT ON COLUMN COURSE.YEAR IS 'Year in which the course was offered, four digits (ie. 2014)';

-- All of the roles that a participant could have in a course
CREATE TABLE IF NOT EXISTS ROLE (
	ID SERIAL PRIMARY KEY,
	NAME TEXT UNIQUE NOT NULL
);

COMMENT ON TABLE ROLE IS 'All of the possible roles in a course';

-- A list of all of the participants in a given course, with their role
-- (student, ta, etc).
CREATE TABLE IF NOT EXISTS ENROLMENT (
	ID INTEGER PRIMARY KEY,
	COURSEID INTEGER NOT NULL REFERENCES COURSE (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	ROLEID INTEGER NOT NULL REFERENCES ROLE (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	ACTIVE BOOLEAN DEFAULT TRUE,
	USABLE BOOLEAN DEFAULT FALSE
);

COMMENT ON TABLE ENROLMENT IS 'Anonymized list of all of the participants in a given course.';
COMMENT ON COLUMN ENROLMENT.ID IS 'Randomized ID to protect the identity of the user';
COMMENT ON COLUMN ENROLMENT.ACTIVE IS 'True if the participant completed the course, false otherwise (Default: True)';
COMMENT ON COLUMN ENROLMENT.USABLE IS 'True if the participant consented to their data being being used for research, false otherwise (Default: False)';

-- The final grades for the students in a given course.
CREATE TABLE IF NOT EXISTS GRADE (
	ENROLLMENTID INTEGER PRIMARY KEY REFERENCES ENROLMENT(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	GRADE INTEGER NOT NULL
);

COMMENT ON TABLE GRADE IS 'Final grades for all students that completed the course';

-- All of the components of the courses, from moodle and otherwise.  Ensuring
-- that there are no duplicates.
CREATE TABLE IF NOT EXISTS ACTIVITYTYPE (
	ID SERIAL PRIMARY KEY,
	NAME TEXT NOT NULL
);

COMMENT ON TABLE ACTIVITYTYPE IS 'The type of activity/module';
COMMENT ON COLUMN ACTIVITYTYPE.NAME IS 'Name of the Activity type, for moodle activities it must match the module name';

-- All of the possible actions, that can be logged.
CREATE TABLE IF NOT EXISTS ACTION (
	ID SERIAL PRIMARY KEY,
	TYPEID INTEGER NOT NULL REFERENCES ACTIVITYTYPE(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT UNIQUE NOT NULL
);

COMMENT ON TABLE ACTION IS 'All of the actions associated with a given activity.';

-- All of the instances of the various components of a course.  A course may
-- have multiple instances of an item.
CREATE TABLE IF NOT EXISTS ACTIVITY (
	ID SERIAL PRIMARY KEY,
	COURSEID INTEGER NOT NULL REFERENCES COURSE(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	TYPEID INTEGER NOT NULL REFERENCES ACTIVITYTYPE(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	GRADEABLE BOOLEAN NOT NULL DEFAULT FALSE,
	STEALTH BOOLEAN NOT NULL DEFAULT FALSE
);

COMMENT ON TABLE ACTIVITY IS 'All of the activities associated with a course offering';

-- All of the grades for the gradable items.  A student must not be graded
-- more than once for one item.
CREATE TABLE IF NOT EXISTS ACTIVITYGRADE (
	ACTIVITYID INTEGER NOT NULL REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	ENROLMENTID INTEGER NOT NULL REFERENCES ENROLMENT(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	GRADE INTEGER NOT NULL,
	UNIQUE (ACTIVITYID, ENROLMENTID)
);

COMMENT ON TABLE ACTIVITYGRADE IS 'Grades assigned to each student for a graded activity';

-- The log.
CREATE TABLE IF NOT EXISTS LOG (
	ID SERIAL PRIMARY KEY,
	ENROLMENTID INTEGER NOT NULL REFERENCES ENROLMENT(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	ACTIVITYID INTEGER NOT NULL REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	ACTIONID INTEGER NOT NULL REFERENCES ACTION(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	TIME TIMESTAMP WITH TIME ZONE NOT NULL
);

COMMENT ON TABLE LOG IS 'Log of actions taken by participants in a given course';

-- IP address associated with the log event, logged if appropriate.
CREATE TABLE IF NOT EXISTS IPLOG (
	LOGID INTEGER UNIQUE NOT NULL REFERENCES LOG(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	IPADDRESS CIDR NOT NULL
);

COMMENT ON TABLE IPLOG IS 'IP Addresses logged by moodle';

-- ---- Moodle Module Definitions ----

-- Moodle assign module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLEASSIGN (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

COMMENT ON TABLE ACTIVITYMOODLEASSIGN IS 'Data from the moodle assign module';

-- Moodle Book Module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLEBOOK (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS ACTIVITYMOODLEBOOKCHAPTER (
	ID SERIAL NOT NULL,
	BOOKID INTEGER NOT NULL REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL,
	PRIMARY KEY (BOOKID, ID)
);

COMMENT ON TABLE ACTIVITYMOODLEBOOK IS 'Data from the moodle book module';
COMMENT ON TABLE ACTIVITYMOODLEBOOKCHAPTER IS 'Data for chapters in the moodle book module';

-- Moodle Checklist Module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLECHECKLIST (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

COMMENT ON TABLE ACTIVITYMOODLECHECKLIST IS 'Data from the moodle checklist module';

-- Moodle Choice Module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLECHOICE (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

COMMENT ON TABLE ACTIVITYMOODLECHOICE IS 'Data from the moodle choice module';

-- Moodle Feedback Module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLEFEEDBACK (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

COMMENT ON TABLE ACTIVITYMOODLEFEEDBACK IS 'Data from the moodle feedback module';

-- Moodle Folder Module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLEFOLDER (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

COMMENT ON TABLE ACTIVITYMOODLEFOLDER IS 'Data from the moodle folder module';

-- Moodle Forum Module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLEFORUM (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS ACTIVITYMOODLEFORUMDISCUSSION (
	ID SERIAL NOT NULL,
	FORUMID INTEGER NOT NULL REFERENCES ACTIVITYMOODLEFORUM(ACTIVITYID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL,
	PRIMARY KEY (FORUMID, ID)
);

CREATE TABLE IF NOT EXISTS ACTIVITYMOODLEFORUMPOST (
	ID SERIAL NOT NULL,
	FORUMID INTEGER NOT NULL,
	DISCUSSIONID INTEGER NOT NULL,
	SUBJECT TEXT NOT NULL,
	FOREIGN KEY (FORUMID, DISCUSSIONID) REFERENCES ACTIVITYMOODLEFORUMDISCUSSION(FORUMID, ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	PRIMARY KEY (FORUMID, DISCUSSIONID, ID)
);

COMMENT ON TABLE ACTIVITYMOODLEFORUM IS 'Data from the moodle forum module';
COMMENT ON TABLE ACTIVITYMOODLEFORUMDISCUSSION IS 'Data from moodle forum discussions';
COMMENT ON TABLE ACTIVITYMOODLEFORUMPOST IS 'Data from moodle forum posts';

-- Moodle Label Module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLELABEL (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

COMMENT ON TABLE ACTIVITYMOODLELABEL IS 'Data from the moodle label module';

-- Moodle Lesson Module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLELESSON (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS ACTIVITYMOODLELESSONPAGE (
	ID SERIAL NOT NULL,
	LESSONID INTEGER NOT NULL REFERENCES ACTIVITYMOODLELESSON(ACTIVITYID) ON DELETE RESTRICT ON UPDATE CASCADE,
	TITLE TEXT NOT NULL,
	PRIMARY KEY (LESSONID, ID)
);

COMMENT ON TABLE ACTIVITYMOODLELESSON IS 'Data from the moodle lesson module';
COMMENT ON TABLE ACTIVITYMOODLELESSONPAGE IS 'Data from pages in the moodle book module';

-- Moodle Page Module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLEPAGE (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

COMMENT ON TABLE ACTIVITYMOODLEPAGE IS 'Data from the moodle page module';

-- Moodle Quiz Module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLEQUIZ (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

COMMENT ON TABLE ACTIVITYMOODLEQUIZ IS 'Data from the moodle quiz module';

-- Moodle Resource Module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLERESOURCE (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

COMMENT ON TABLE ACTIVITYMOODLERESOURCE IS 'Data from the moodle resource module';

-- Moodle Scheduler Module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLESCHEDULER (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

COMMENT ON TABLE ACTIVITYMOODLESCHEDULER IS 'Data from the moodle scheduler module';

-- Moodle URL Module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLEURL (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

COMMENT ON TABLE ACTIVITYMOODLEURL IS 'Data from the moodle url module';

-- Moodle Workshop Module
CREATE TABLE IF NOT EXISTS ACTIVITYMOODLEWORKSHOP (
	ACTIVITYID INTEGER PRIMARY KEY REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS ACTIVITYMOODLEWORKSHOPSUBMISSION (
	ID SERIAL NOT NULL,
	WORKSHOPID INTEGER NOT NULL REFERENCES ACTIVITYMOODLEWORKSHOP(ACTIVITYID) ON DELETE RESTRICT ON UPDATE CASCADE,
	TITLE TEXT NOT NULL,
	PRIMARY KEY (WORKSHOPID, ID)
);

COMMENT ON TABLE ACTIVITYMOODLEWORKSHOP IS 'Data from the moodle workshop module';
COMMENT ON TABLE ACTIVITYMOODLEWORKSHOPSUBMISSION IS 'Data from submissions in the moodle workshop module';

-- ---- List of Known Modules (Activity Types) ----

INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Blog');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Calendar');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Course');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Grade');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Notes');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Role');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('User');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Assign');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Book');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Checklist');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Choice');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Feedback');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Folder');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Forum');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Label');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Lesson');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Page');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Quiz');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Resource');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Scheduler');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('URL');
INSERT INTO ACTIVITYTYPE (NAME) VALUES ('Workshop');