-- Schema for the anonymized, "public" database of course data.  This schema
-- is documented in the wiki.

CREATE TYPE E_SEMESTER AS ENUM ('WINTER', 'SPRING', 'FALL')
CREATE TYPE E_ACTIVITYTYPE AS ENUM ('SINGLE-INSTANCE', 'MULTI-INSTANCE', 'HIERARCHICAL')
CREATE TYPE E_ACTIVITYSOURCE AS ENUM ('MOODLE', 'MANUAL')

-- Courses table, making sure that there may be only one offering of a given
-- course in a given semester.
CREATE TABLE IF NOT EXISTS COURSE (
	ID SERIAL PRIMARY KEY,
	YEAR INTEGER NOT NULL,
	SEMESTER E_SEMESTER NOT NULL,
	NAME TEXT NOT NULL,
	UNIQUE (YEAR, SEMESTER, NAME)
);

-- All of the roles that a participant could have in a course
CREATE TABLE IF NOT EXISTS ROLE (
	ID SERIAL PRIMARY KEY,
	NAME TEXT UNIQUE NOT NULL
);

-- A list of all of the participants in a given course, with their role
-- (student, ta, etc).
CREATE TABLE IF NOT EXISTS ENROLMENT (
	ID INTEGER PRIMARY KEY,
	COURSEID INTEGER NOT NULL REFERENCES COURSE (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	ROLEID INTEGER NOT NULL REFERENCES ROLE (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	USABLE BOOLEAN DEFAULT FALSE
);

-- All of the components of the courses, from moodle and otherwise.  Ensuring
-- that there are no duplicates.
CREATE TABLE IF NOT EXISTS ACTIVITYTYPE (
	ID SERIAL PRIMARY KEY,
	TYPE E_ACTIVITYTYPE NOT NULL,
	SOURCE E_ACTIVITYSOURCE NOT NULL,
	NAME TEXT NOT NULL,
	UNIQUE (SOURCE, NAME)
);

-- All of the tables holding the instance data for the multi-instance and
-- hierarchical activity types.
CREATE TABLE IF NOT EXISTS ACTIVITYDATA (
	ID SERIAL PRIMARY KEY,
	TYPEID INTEGER NOT NULL REFERENCES ACTIVITYTYPE(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	TABLE TEXT NOT NULL,
);

-- relations between the instance tables for the hierarchical activity type
CREATE TABLE IF NOT EXISTS ACTIVITYHIERARCHY (
	PARENTID INTEGER NOT NULL REFERENCES ACTIVITYDATA(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	CHILDID INTEGER NOT NULL REFERENCES ACTIVITYDATA(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	UNIQUE (PARENTID, CHILDID)
);

-- names of the tables holding the extra log data for the hierarchical
-- activity type.
CREATE TABLE IF NOT EXISTS ACTIVITYLOG (
	DATAID INTEGER NOT NULL REFERENCES ACTIVITYDATA(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	TABLE TEXT NOT NULL,
	UNIQUE (DATAID, TABLE)
);

-- All of the possible actions, that can be logged.
CREATE TABLE IF NOT EXISTS ACTION (
	ID SERIAL PRIMARY KEY,
	TYPEID INTEGER NOT NULL REFERENCES ACTIVITYDATA(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	NAME TEXT UNIQUE NOT NULL
);

-- The final grades for the students in a given course.
CREATE TABLE IF NOT EXISTS GRADE (
	ENROLLMENTID INTEGER PRIMARY KEY REFERENCES ENROLMENTS(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	GRADE INTEGER NOT NULL,
);

-- All of the instances of the various components of a course.  A course may
-- have multiple instances of an item, if it does then the description must be
-- filled in so that the items are identifiable.
CREATE TABLE IF NOT EXISTS ACTIVITY (
	ID SERIAL PRIMARY KEY,
	COURSEID INTEGER NOT NULL REFERENCES COURSES(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	TYPEID INTEGER NOT NULL REFERENCES ACTIVITYTYPE(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	GRADEABLE BOOLEAN NOT NULL DEFAULT FALSE,
	STEALTH BOOLEAN NOT NULL DEFAULT FALSE
);

-- All of the grades for the gradable items.  A student must not be graded
-- more than once for one item.
CREATE TABLE IF NOT EXISTS ACTIVITYGRADE (
	ACTIVITYID INTEGER NOT NULL REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	ENROLMENTID INTEGER NOT NULL REFERENCES ENROLMENT(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	GRADE INTEGER NOT NULL,
	UNIQUE (ACTIVITYID, ENROLMENTID)
);

-- The log.
CREATE TABLE IF NOT EXISTS LOG (
	ID SERIAL PRIMARY KEY,
	ENROLMENTID INTEGER NOT NULL REFERENCES ENROLMENT(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	ACTIVITYID INTEGER NOT NULL REFERENCES ACTIVITY(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	ACTIONID INTEGER NOT NULL REFERENCES ACTION(ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	TIME TIMESTAMP WITH TIME ZONE NOT NULL
);

-- Moodle specific componets of the log.  Ony one moodle specific item per log event.
CREATE TABLE IF NOT EXISTS MOODLELOG (
	LOGID INTEGER UNIQUE NOT NULL REFERENCES LOG(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	IPADDRESS CIDR NOT NULL
);
