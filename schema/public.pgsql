-- Schema for the anonymized, "public" database of student data.  This schema 
-- is documented in the wiki.

-- All of the students contained in this database
CREATE TABLE IF NOT EXISTS STUDENTS (
	ID INTEGER PRIMARY KEY
);

-- Courses table, making sure that there may be only one offering of a given 
-- course in a given semester.
CREATE TABLE IF NOT EXISTS COURSES (
	ID SERIAL PRIMARY KEY,
	YEAR INTEGER NOT NULL,
	SEMESTER CHAR NOT NULL,
	NAME TEXT NOT NULL,
	UNIQUE (YEAR, SEMESTER, NAME)
);

-- All of the roles that a student could have in a course
CREATE TABLE IF NOT EXISTS ROLES (
	ID SERIAL PRIMARY KEY,
	NAME TEXT UNIQUE NOT NULL
);

-- All of the compoentents of the courses, from moodle and otherwise.  Ensuring
-- that there are no duplicates.
CREATE TABLE IF NOT EXISTS ITEMS (
	ID SERIAL PRIMARY KEY,
	SOURCE TEXT NOT NULL,
	NAME TEXT NOT NULL,
	UNIQUE (SOURCE, NAME)
);

-- All of the possible actions, that can be logged.
CREATE TABLE IF NOT EXISTS ACTIONS (
	ID SERIAL PRIMARY KEY,
	NAME TEXT UNIQUE NOT NULL
);

-- A list of all of the students enrolled in a given course, with their role 
-- (student, ta, etc), A student should only be enrolled in a given course once.
CREATE TABLE IF NOT EXISTS ENROLLMENTS (
	STUDENTID INTEGER NOT NULL REFERENCES STUDENTS (ID) ON DELETE CASCADE ON UPDATE CASCADE,
	COURSEID INTEGER NOT NULL REFERENCES COURSES (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	ROLEID INTEGER NOT NULL REFERENCES ROLES (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	UNIQUE (STUDENTID, COURSEID)
);

-- The final grades for the students in a given course.  A student should have 
-- only one final grade for a given course.
CREATE TABLE IF NOT EXISTS GRADES (
	STUDENTID INTEGER NOT NULL REFERENCES STUDENTS (ID) ON DELETE CASCADE ON UPDATE CASCADE,
	COURSEID INTEGER NOT NULL REFERENCES COURSES (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	GRADE INTEGER NOT NULL,
	UNIQUE (STUDENTID, COURSEID)
);

-- All of the instances of the various components of a course.  A course may 
-- have multiple instances of an item, if it does then the description must be 
-- filled in so that the items are identifiable.
CREATE TABLE IF NOT EXISTS INSTANCES (
	ID SERIAL PRIMARY KEY,
	COURSEID INTEGER NOT NULL REFERENCES COURSES (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	ITEMID INTEGER NOT NULL REFERENCES ITEMS (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	GRADEABLE BOOLEAN NOT NULL DEFAULT FALSE,
	DESCRIPTION TEXT,
	UNIQUE (COURSEID, ITEMID, DESCRIPTION)
);

-- All of the grades for the gradable items.  A student must not be graded 
-- more than once for one item.
CREATE TABLE IF NOT EXISTS GRADEDITEMS (
	INSTANCEID INTEGER NOT NULL REFERENCES INSTANCES (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	STUDENTID INTEGER NOT NULL REFERENCES STUDENTS (ID) ON DELETE CASCADE ON UPDATE CASCADE,
	GRADE INTEGER NOT NULL,
	UNIQUE (INSTANCEID, STUDENTID)
);

-- The log.
CREATE TABLE IF NOT EXISTS LOG (
	ID SERIAL PRIMARY KEY,
	STUDENTID INTEGER NOT NULL REFERENCES STUDENTS (ID) ON DELETE CASCADE ON UPDATE CASCADE,
	INSTNACEID INTEGER NOT NULL REFERENCES INSTANCES (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	ACTIONID INTEGER NOT NULL REFERENCES ACTIONS (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
	TIME TIMESTAMP WITH TIME ZONE NOT NULL
);

-- Moodle specific componets of the log.  Ony one moodle specific item per log event.
CREATE TABLE IF NOT EXISTS MOODLELOG (
	LOGID INTEGER UNIQUE NOT NULL REFERENCES LOG (ID) ON DELETE CASCADE ON UPDATE CASCADE,
	IPADDRESS CIDR NOT NULL
);
